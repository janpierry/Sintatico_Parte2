/* Generated By:JavaCC: Do not edit this line. langX.java */
package parser;

import java.io.*;
import recovery.*;   // importa as classes de recuperação de erros do AS


public class langX implements langXConstants {
final static String Version = "X++ Compiler - Version 1.0 - 2004";
int contParseError = 0;           // contador de erros sintáticos
boolean debug_recovery;   // controla verbose de recuperação de erros
Token lastError = null;


// Define o método "main" da classe langX.  
  public  static void main(String args[]) throws ParseException
  {
  boolean debug_as = false;
  boolean debug_recovery = false;

    String filename = ""; // nome do arquivo a ser analisado
    langX parser;     // analisador léxico/sintático
    int i;
    boolean ms = false;

    System.out.println(Version);
    // lê os parâmetros passados para o compilador
    for (i = 0; i < args.length - 1; i++)
    {
        if (args[i].equals("-debug_AS") )
            debug_as = true;
        else
        if (args[i].equals("-debug_recovery") )
            debug_recovery = true;
        else
        {
            System.out.println("Usage is: java langX [-debug_AS] " +
             "[-debug_recovery] inputfile");
            System.exit(0);
        }
    }

    if (args[i].equals("-"))
    {       // lê da entrada padrão      
        System.out.println("Reading from standard input . . .");
        parser = new langX(System.in); // cria AS
     }
     else
    {       // lê do arquivo
        filename = args[args.length-1];
        System.out.println("Reading from file " + filename + " . . .");
        try {  // cria AS
            parser = new langX(new java.io.FileInputStream(filename));
        }
    catch (java.io.FileNotFoundException e) {
               System.out.println("File " + filename + " not found.");
        return;
        }
    }

    parser.debug_recovery = debug_recovery;
    if (! debug_as) parser.disable_tracing(); // desab. verbose do AS
    try {
        parser.program();   // chama o método que faz a análise
    }
    catch (ParseEOFException e)
    {
    System.err.println(e.getMessage());
    }
    finally {
        System.out.println(parser.token_source.foundLexError() +
                                " Lexical Errors found");
        System.out.println(parser.contParseError + " Syntactic Errors found");
     }

}  // main

static public String im(int x)
{
int k;
String s;
   s = tokenImage[x];
   k = s.lastIndexOf("\u005c"");
   try {s = s.substring(1,k);}
   catch (StringIndexOutOfBoundsException e)
   {}
   return s;
}


boolean eof;    // variável que indica se EOF foi alcançado
// o método abaixo consome tokens até alcançar um que pertença ao conjunto
// de sincronização

void consumeUntil(RecoverySet g,
                 ParseException e,
                 String met) throws ParseEOFException,
                                    ParseException
{
Token tok;

   if ( debug_recovery) // informação sobre a recuperação
   {
       System.out.println();
       System.out.println("*** " + met + " ***");
       System.out.println("     Syncronizing Set: " + g);
   }

   if (g == null) throw e; // se o conjunto é null, propaga a exceção

   tok = getToken(1); // pega token corrente
   while ( ! eof )  // se não chegou ao fim do arquivo
   {
        if ( g.contains(tok.kind ) ) //achou um token no conjunto
        {
             if ( debug_recovery)
               System.out.println("     Found syncronizing token: " +
                                   im(tok.kind));
             break;
        }
        if (debug_recovery)
             System.out.println("     Ignoring token: " + im(tok.kind));
        getNextToken();     // pega próximo token       
        tok = getToken(1);
        if (tok.kind == EOF && ! g.contains(EOF) ) // fim da entrada?   
            eof = true;
    }
   if ( tok != lastError)
   {
        System.out.println(e.getMessage());
        lastError = tok;
        contParseError++;  // incrementa número de erros
   }
   if ( eof ) throw new ParseEOFException("EOF found prematurely.");
}

  final public void program() throws ParseException, ParseEOFException {
    trace_call("program");
    try {
RecoverySet g = First.program;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 0:
        jj_consume_token(0);
        break;
      case CLASS:
      case PUBLIC:
      case PRIVATE:
      case PROTECTED:
        classlist(g);
        try {
          jj_consume_token(0);
        } catch (ParseException e) {
       consumeUntil(g, e, "program");
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 0:
        case CLASS:
        case PUBLIC:
        case PRIVATE:
        case PROTECTED:
          program();
          break;
        default:
          jj_la1[0] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("program");
    }
  }

  final public void classlist(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("classlist");
    try {
RecoverySet f = First.classlist.union(g);
      classdecl(f);
      if (jj_2_1(2)) {
        classlist(g);
      } else {
        ;
      }
    } finally {
      trace_return("classlist");
    }
  }

  final public void classdecl(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("classdecl");
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
        case PRIVATE:
        case PROTECTED:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PUBLIC:
            jj_consume_token(PUBLIC);
            break;
          case PRIVATE:
            jj_consume_token(PRIVATE);
            break;
          case PROTECTED:
            jj_consume_token(PROTECTED);
            break;
          default:
            jj_la1[2] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[3] = jj_gen;
          ;
        }
        jj_consume_token(CLASS);
        jj_consume_token(IDENT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXTENDS:
          jj_consume_token(EXTENDS);
          jj_consume_token(IDENT);
          break;
        default:
          jj_la1[4] = jj_gen;
          ;
        }
        classbody(g);
      } catch (ParseException e) {
    consumeUntil(g, e, "classdecl");
      }
    } finally {
      trace_return("classdecl");
    }
  }

  final public void classbody(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("classbody");
    try {
RecoverySet f2 = new RecoverySet(SEMICOLON).union(g).remove(IDENT),
            f3 = First.methoddecl.union(g).remove(IDENT),
            f4 = First.constructdecl.union(f3).remove(IDENT),
            f5 = First.vardecl.union(f4).remove(IDENT);
      try {
        jj_consume_token(LBRACE);
        if (jj_2_2(2)) {
          classlist(f5);
        } else {
          ;
        }
        label_1:
        while (true) {
          if (jj_2_3(3)) {
            ;
          } else {
            break label_1;
          }
          vardecl(f2);
          jj_consume_token(SEMICOLON);
        }
        label_2:
        while (true) {
          if (jj_2_4(2)) {
            ;
          } else {
            break label_2;
          }
          atribstat(f2);
          jj_consume_token(SEMICOLON);
        }
        label_3:
        while (true) {
          if (jj_2_5(2)) {
            ;
          } else {
            break label_3;
          }
          constructdecl(f4);
        }
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INT:
          case STRING:
          case CHAR:
          case BOOLEAN:
          case DOUBLE:
          case BYTE:
          case SHORT:
          case LONG:
          case FLOAT:
          case FINAL:
          case PUBLIC:
          case PRIVATE:
          case PROTECTED:
          case IDENT:
            ;
            break;
          default:
            jj_la1[5] = jj_gen;
            break label_4;
          }
          methoddecl(f3);
        }
        jj_consume_token(RBRACE);
      } catch (ParseException e) {
   consumeUntil(g, e, "classbody");
      }
    } finally {
      trace_return("classbody");
    }
  }

  final public void vardecl(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("vardecl");
    try {
        RecoverySet f1 = new RecoverySet(IDENT).union(g);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
        case PRIVATE:
        case PROTECTED:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PUBLIC:
            jj_consume_token(PUBLIC);
            break;
          case PRIVATE:
            jj_consume_token(PRIVATE);
            break;
          case PROTECTED:
            jj_consume_token(PROTECTED);
            break;
          default:
            jj_la1[6] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[7] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FINAL:
          jj_consume_token(FINAL);
          break;
        default:
          jj_la1[8] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case STRING:
        case CHAR:
        case BOOLEAN:
        case DOUBLE:
        case BYTE:
        case SHORT:
        case LONG:
        case FLOAT:
          primitivetype(f1);
          break;
        case IDENT:
          jj_consume_token(IDENT);
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(IDENT);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            ;
            break;
          default:
            jj_la1[10] = jj_gen;
            break label_5;
          }
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
        }
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[11] = jj_gen;
            break label_6;
          }
          jj_consume_token(COMMA);
          jj_consume_token(IDENT);
          label_7:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACKET:
              ;
              break;
            default:
              jj_la1[12] = jj_gen;
              break label_7;
            }
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
          }
        }
      } catch (ParseException e) {
   consumeUntil(g, e, "vardecl");
      }
    } finally {
      trace_return("vardecl");
    }
  }

  final public void constructdecl(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("constructdecl");
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
        case PRIVATE:
        case PROTECTED:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PUBLIC:
            jj_consume_token(PUBLIC);
            break;
          case PRIVATE:
            jj_consume_token(PRIVATE);
            break;
          case PROTECTED:
            jj_consume_token(PROTECTED);
            break;
          default:
            jj_la1[13] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[14] = jj_gen;
          ;
        }
        jj_consume_token(CONSTRUCTOR);
        methodbody(g);
      } catch (ParseException e) {
   consumeUntil(g, e, "constructdecl");
      }
    } finally {
      trace_return("constructdecl");
    }
  }

  final public void methoddecl(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("methoddecl");
    try {
        RecoverySet f1 = new RecoverySet(LBRACKET).union(g);
        RecoverySet f2 = new RecoverySet(IDENT).union(f1);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
        case PRIVATE:
        case PROTECTED:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PUBLIC:
            jj_consume_token(PUBLIC);
            break;
          case PRIVATE:
            jj_consume_token(PRIVATE);
            break;
          case PROTECTED:
            jj_consume_token(PROTECTED);
            break;
          default:
            jj_la1[15] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[16] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FINAL:
          jj_consume_token(FINAL);
          break;
        default:
          jj_la1[17] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case STRING:
        case CHAR:
        case BOOLEAN:
        case DOUBLE:
        case BYTE:
        case SHORT:
        case LONG:
        case FLOAT:
          primitivetype(f2);
          break;
        case IDENT:
          jj_consume_token(IDENT);
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            ;
            break;
          default:
            jj_la1[19] = jj_gen;
            break label_8;
          }
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
        }
        jj_consume_token(IDENT);
        methodbody(g);
      } catch (ParseException e) {
   consumeUntil(g, e, "methoddecl");
      }
    } finally {
      trace_return("methoddecl");
    }
  }

  final public void methodbody(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("methodbody");
    try {
RecoverySet f = new RecoverySet(RPAREN).union(g);
      try {
        jj_consume_token(LPAREN);
        paramlist(f);
        jj_consume_token(RPAREN);
        statement(g);
      } catch (ParseException e) {
   consumeUntil(g, e, "methodbody");
      }
    } finally {
      trace_return("methodbody");
    }
  }

  final public void paramlist(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("paramlist");
    try {
        RecoverySet f1 = new RecoverySet(IDENT).union(g);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case STRING:
        case CHAR:
        case BOOLEAN:
        case DOUBLE:
        case BYTE:
        case SHORT:
        case LONG:
        case FLOAT:
        case IDENT:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INT:
          case STRING:
          case CHAR:
          case BOOLEAN:
          case DOUBLE:
          case BYTE:
          case SHORT:
          case LONG:
          case FLOAT:
            primitivetype(f1);
            break;
          case IDENT:
            jj_consume_token(IDENT);
            break;
          default:
            jj_la1[20] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          jj_consume_token(IDENT);
          label_9:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACKET:
              ;
              break;
            default:
              jj_la1[21] = jj_gen;
              break label_9;
            }
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
          }
          label_10:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[22] = jj_gen;
              break label_10;
            }
            jj_consume_token(COMMA);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case INT:
            case STRING:
            case CHAR:
            case BOOLEAN:
            case DOUBLE:
            case BYTE:
            case SHORT:
            case LONG:
            case FLOAT:
              primitivetype(f1);
              break;
            case IDENT:
              jj_consume_token(IDENT);
              break;
            default:
              jj_la1[23] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            jj_consume_token(IDENT);
            label_11:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case LBRACKET:
                ;
                break;
              default:
                jj_la1[24] = jj_gen;
                break label_11;
              }
              jj_consume_token(LBRACKET);
              jj_consume_token(RBRACKET);
            }
          }
          break;
        default:
          jj_la1[25] = jj_gen;
          ;
        }
      } catch (ParseException e) {
   consumeUntil(g, e, "paramlist");
      }
    } finally {
      trace_return("paramlist");
    }
  }

  final public void statement(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("statement");
    try {
RecoverySet f1 = new RecoverySet(SEMICOLON).union(g).remove(IDENT);
RecoverySet f2 = new RecoverySet(RBRACE).union(g).remove(IDENT);
      try {
        if (jj_2_6(3)) {
          methodcall(f1);
          jj_consume_token(SEMICOLON);
        } else if (jj_2_7(2147483647)) {
          vardecl(f1);
          jj_consume_token(SEMICOLON);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENT:
            atribstat(f1);
            jj_consume_token(SEMICOLON);
            break;
          case INT:
          case STRING:
          case CHAR:
          case BOOLEAN:
          case DOUBLE:
          case BYTE:
          case SHORT:
          case LONG:
          case FLOAT:
          case FINAL:
          case PUBLIC:
          case PRIVATE:
          case PROTECTED:
            vardecl(f1);
            jj_consume_token(SEMICOLON);
            break;
          case PRINT:
            printstat(f1);
            jj_consume_token(SEMICOLON);
            break;
          case READ:
            readstat(f1);
            jj_consume_token(SEMICOLON);
            break;
          case RETURN:
            returnstat(f1);
            jj_consume_token(SEMICOLON);
            break;
          case SUPER:
            superstat(f1);
            jj_consume_token(SEMICOLON);
            break;
          case IF:
            ifstat(g);
            break;
          case FOR:
            forstat(g);
            break;
          case LBRACE:
            jj_consume_token(LBRACE);
            statlist(f2);
            jj_consume_token(RBRACE);
            break;
          case BREAK:
            jj_consume_token(BREAK);
            jj_consume_token(SEMICOLON);
            break;
          case SEMICOLON:
            jj_consume_token(SEMICOLON);
            break;
          case DO:
            dowhilestat(f1);
            jj_consume_token(SEMICOLON);
            break;
          case WHILE:
            whilestat(g);
            break;
          case SWITCH:
            switchstat(g);
            break;
          default:
            jj_la1[26] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (ParseException e) {
   consumeUntil(g, e, "statement");
      }
    } finally {
      trace_return("statement");
    }
  }

  final public void methodcall(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("methodcall");
    try {
        RecoverySet f1 = new RecoverySet(RPAREN).union(g);
      try {
        jj_consume_token(IDENT);
        label_12:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DOT:
            ;
            break;
          default:
            jj_la1[27] = jj_gen;
            break label_12;
          }
          jj_consume_token(DOT);
          jj_consume_token(IDENT);
        }
        jj_consume_token(LPAREN);
        paramlist(f1);
        jj_consume_token(RPAREN);
      } catch (ParseException e) {
        consumeUntil(g, e, "methodcall");
      }
    } finally {
      trace_return("methodcall");
    }
  }

  final public void atribstat(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("atribstat");
    try {
RecoverySet f1 = new RecoverySet(ASSIGN).union(g);
      try {
        lvalue(f1);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
          alocexpression(g);
          break;
        default:
          jj_la1[28] = jj_gen;
          if (jj_2_8(3)) {
            logicexpression(g);
          } else if (jj_2_9(3)) {
            methodcall(g);
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (ParseException e) {
   consumeUntil(g, e, "atribstat");
      }
    } finally {
      trace_return("atribstat");
    }
  }

  final public void printstat(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("printstat");
    try {
      try {
        jj_consume_token(PRINT);
        logicexpression(g);
      } catch (ParseException e) {
   consumeUntil(g, e, "printstat");
      }
    } finally {
      trace_return("printstat");
    }
  }

  final public void readstat(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("readstat");
    try {
      try {
        jj_consume_token(READ);
        lvalue(g);
      } catch (ParseException e) {
   consumeUntil(g, e, "readstat");
      }
    } finally {
      trace_return("readstat");
    }
  }

  final public void returnstat(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("returnstat");
    try {
      try {
        jj_consume_token(RETURN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case int_constant:
        case string_constant:
        case null_constant:
        case boolean_constant:
        case char_constant:
        case double_constant:
        case byte_constant:
        case short_constant:
        case long_constant:
        case float_constant:
        case IDENT:
        case LPAREN:
        case PLUS:
        case MINUS:
        case NOT:
          logicexpression(g);
          break;
        default:
          jj_la1[29] = jj_gen;
          ;
        }
      } catch (ParseException e) {
   consumeUntil(g, e, "returnstat");
      }
    } finally {
      trace_return("returnstat");
    }
  }

  final public void superstat(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("superstat");
    try {
RecoverySet f = new RecoverySet(RPAREN).union(g);
      try {
        jj_consume_token(SUPER);
        jj_consume_token(LPAREN);
        arglist(f);
        jj_consume_token(RPAREN);
      } catch (ParseException e) {
   consumeUntil(g, e, "superstat");
      }
    } finally {
      trace_return("superstat");
    }
  }

  final public void ifstat(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("ifstat");
    try {
RecoverySet f1 = new RecoverySet(RPAREN).union(g),
            f2 = new RecoverySet(ELSE).union(g);
      try {
        jj_consume_token(IF);
        jj_consume_token(LPAREN);
        logicexpression(f1);
        jj_consume_token(RPAREN);
        statement(f2);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSE:
          jj_consume_token(ELSE);
          statement(g);
          break;
        default:
          jj_la1[30] = jj_gen;
          ;
        }
      } catch (ParseException e) {
   consumeUntil(g, e, "ifstat");
      }
    } finally {
      trace_return("ifstat");
    }
  }

  final public void forstat(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("forstat");
    try {
RecoverySet f1 = new RecoverySet(SEMICOLON).union(g),
            f2 = new RecoverySet(RPAREN).union(g);
      try {
        jj_consume_token(FOR);
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          atribstat(f1);
          break;
        default:
          jj_la1[31] = jj_gen;
          ;
        }
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case int_constant:
        case string_constant:
        case null_constant:
        case boolean_constant:
        case char_constant:
        case double_constant:
        case byte_constant:
        case short_constant:
        case long_constant:
        case float_constant:
        case IDENT:
        case LPAREN:
        case PLUS:
        case MINUS:
        case NOT:
          logicexpression(f1);
          break;
        default:
          jj_la1[32] = jj_gen;
          ;
        }
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          atribstat(f2);
          break;
        default:
          jj_la1[33] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
        statement(g);
      } catch (ParseException e) {
   consumeUntil(g, e, "forstat");
      }
    } finally {
      trace_return("forstat");
    }
  }

  final public void whilestat(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("whilestat");
    try {
        RecoverySet f1 = new RecoverySet(RPAREN).union(g);
      try {
        jj_consume_token(WHILE);
        jj_consume_token(LPAREN);
        logicexpression(f1);
        jj_consume_token(RPAREN);
        statement(g);
      } catch (ParseException e) {
        consumeUntil(g, e, "whilestat");
      }
    } finally {
      trace_return("whilestat");
    }
  }

  final public void dowhilestat(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("dowhilestat");
    try {
        RecoverySet f1 = new RecoverySet(LPAREN).union(g);
        RecoverySet f2 = new RecoverySet(RPAREN).union(g);
      try {
        jj_consume_token(DO);
        statement(f1);
        jj_consume_token(LPAREN);
        logicexpression(f2);
        jj_consume_token(RPAREN);
      } catch (ParseException e) {
        consumeUntil(g, e, "dowhilestat");
      }
    } finally {
      trace_return("dowhilestat");
    }
  }

  final public void switchstat(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("switchstat");
    try {
        RecoverySet f1 = new RecoverySet(RBRACE).union(g);
        RecoverySet f2 = First.switchcasestat.union(f1);
      jj_consume_token(SWITCH);
      jj_consume_token(LPAREN);
      jj_consume_token(IDENT);
      jj_consume_token(RPAREN);
      jj_consume_token(LBRACE);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CASE:
        case DEFAULTT:
          ;
          break;
        default:
          jj_la1[34] = jj_gen;
          break label_13;
        }
        switchcasestat(f2);
      }
      jj_consume_token(RBRACE);
    } finally {
      trace_return("switchstat");
    }
  }

  final public void switchcasestat(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("switchcasestat");
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CASE:
          jj_consume_token(CASE);
          factor();
          break;
        case DEFAULTT:
          jj_consume_token(DEFAULTT);
          break;
        default:
          jj_la1[35] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(DOISP);
        statement(g);
      } catch (ParseException e) {
        consumeUntil(g, e, "switchcasestat");
      }
    } finally {
      trace_return("switchcasestat");
    }
  }

  final public void statlist(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("statlist");
    try {
RecoverySet f = First.statlist.remove(IDENT).union(g);
      statement(f);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BREAK:
      case FOR:
      case IF:
      case INT:
      case PRINT:
      case READ:
      case RETURN:
      case STRING:
      case SUPER:
      case WHILE:
      case DO:
      case SWITCH:
      case CHAR:
      case BOOLEAN:
      case DOUBLE:
      case BYTE:
      case SHORT:
      case LONG:
      case FLOAT:
      case FINAL:
      case PUBLIC:
      case PRIVATE:
      case PROTECTED:
      case IDENT:
      case LBRACE:
      case SEMICOLON:
        statlist(g);
        break;
      default:
        jj_la1[36] = jj_gen;
        ;
      }
    } finally {
      trace_return("statlist");
    }
  }

  final public void lvalue(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("lvalue");
    try {
      try {
        jj_consume_token(IDENT);
        label_14:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
          case DOT:
            ;
            break;
          default:
            jj_la1[37] = jj_gen;
            break label_14;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            jj_consume_token(LBRACKET);
            expression(null);
            jj_consume_token(RBRACKET);
            break;
          case DOT:
            jj_consume_token(DOT);
            jj_consume_token(IDENT);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LPAREN:
              jj_consume_token(LPAREN);
              arglist(null);
              jj_consume_token(RPAREN);
              break;
            default:
              jj_la1[38] = jj_gen;
              ;
            }
            break;
          default:
            jj_la1[39] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (ParseException e) {
   consumeUntil(g, e, "lvalue");
      }
    } finally {
      trace_return("lvalue");
    }
  }

  final public void alocexpression(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("alocexpression");
    try {
RecoverySet f1 = new RecoverySet(RPAREN).union(g),
            f2 = new RecoverySet(RBRACKET).union(g),
            f3 = new RecoverySet(LBRACKET).union(g);
      try {
        jj_consume_token(NEW);
        if (jj_2_10(2)) {
          jj_consume_token(IDENT);
          jj_consume_token(LPAREN);
          arglist(f1);
          jj_consume_token(RPAREN);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INT:
          case STRING:
          case CHAR:
          case BOOLEAN:
          case DOUBLE:
          case BYTE:
          case SHORT:
          case LONG:
          case FLOAT:
          case IDENT:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case INT:
            case STRING:
            case CHAR:
            case BOOLEAN:
            case DOUBLE:
            case BYTE:
            case SHORT:
            case LONG:
            case FLOAT:
              primitivetype(f3);
              break;
            case IDENT:
              jj_consume_token(IDENT);
              break;
            default:
              jj_la1[40] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            label_15:
            while (true) {
              jj_consume_token(LBRACKET);
              expression(f2);
              jj_consume_token(RBRACKET);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case LBRACKET:
                ;
                break;
              default:
                jj_la1[41] = jj_gen;
                break label_15;
              }
            }
            break;
          default:
            jj_la1[42] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (ParseException e) {
        consumeUntil(g, e, "alocexpression");
      }
    } finally {
      trace_return("alocexpression");
    }
  }

  final public void logicexpression(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("logicexpression");
    try {
        RecoverySet f1 = new RecoverySet(XOR).union(g);
        RecoverySet f2 = new RecoverySet(OR).union(f1);
        RecoverySet f3 = new RecoverySet(AND).union(f2);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOT:
          jj_consume_token(NOT);
          break;
        default:
          jj_la1[43] = jj_gen;
          ;
        }
        expression(f3);
        label_16:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AND:
          case OR:
          case XOR:
            ;
            break;
          default:
            jj_la1[44] = jj_gen;
            break label_16;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case XOR:
            jj_consume_token(XOR);
            break;
          case OR:
            jj_consume_token(OR);
            break;
          case AND:
            jj_consume_token(AND);
            break;
          default:
            jj_la1[45] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NOT:
            jj_consume_token(NOT);
            break;
          default:
            jj_la1[46] = jj_gen;
            ;
          }
          expression(f3);
        }
      } catch (ParseException e) {
        consumeUntil(g, e, "logicexpression");
      }
    } finally {
      trace_return("logicexpression");
    }
  }

  final public void expression(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("expression");
    try {
      try {
        numexpr();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GT:
        case LT:
        case EQ:
        case LE:
        case GE:
        case NEQ:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LT:
            jj_consume_token(LT);
            break;
          case GT:
            jj_consume_token(GT);
            break;
          case LE:
            jj_consume_token(LE);
            break;
          case GE:
            jj_consume_token(GE);
            break;
          case EQ:
            jj_consume_token(EQ);
            break;
          case NEQ:
            jj_consume_token(NEQ);
            break;
          default:
            jj_la1[47] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          numexpr();
          break;
        default:
          jj_la1[48] = jj_gen;
          ;
        }
      } catch (ParseException e) {
   consumeUntil(g, e, "expression");
      }
    } finally {
      trace_return("expression");
    }
  }

  final public void numexpr() throws ParseException, ParseEOFException {
    trace_call("numexpr");
    try {
      term();
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          jj_la1[49] = jj_gen;
          break label_17;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case MINUS:
          jj_consume_token(MINUS);
          break;
        default:
          jj_la1[50] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        term();
      }
    } finally {
      trace_return("numexpr");
    }
  }

  final public void term() throws ParseException, ParseEOFException {
    trace_call("term");
    try {
      unaryexpr();
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
        case SLASH:
        case REM:
          ;
          break;
        default:
          jj_la1[51] = jj_gen;
          break label_18;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
          jj_consume_token(STAR);
          break;
        case SLASH:
          jj_consume_token(SLASH);
          break;
        case REM:
          jj_consume_token(REM);
          break;
        default:
          jj_la1[52] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        unaryexpr();
      }
    } finally {
      trace_return("term");
    }
  }

  final public void unaryexpr() throws ParseException, ParseEOFException {
    trace_call("unaryexpr");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case MINUS:
          jj_consume_token(MINUS);
          break;
        default:
          jj_la1[53] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[54] = jj_gen;
        ;
      }
      factor();
    } finally {
      trace_return("unaryexpr");
    }
  }

  final public void factor() throws ParseException, ParseEOFException {
    trace_call("factor");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case int_constant:
        jj_consume_token(int_constant);
        break;
      case string_constant:
        jj_consume_token(string_constant);
        break;
      case boolean_constant:
        jj_consume_token(boolean_constant);
        break;
      case char_constant:
        jj_consume_token(char_constant);
        break;
      case double_constant:
        jj_consume_token(double_constant);
        break;
      case byte_constant:
        jj_consume_token(byte_constant);
        break;
      case short_constant:
        jj_consume_token(short_constant);
        break;
      case long_constant:
        jj_consume_token(long_constant);
        break;
      case float_constant:
        jj_consume_token(float_constant);
        break;
      case null_constant:
        jj_consume_token(null_constant);
        break;
      default:
        jj_la1[55] = jj_gen;
        if (jj_2_11(3)) {
          lvalue(null);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENT:
            methodcall(null);
            break;
          case LPAREN:
            jj_consume_token(LPAREN);
            expression(null);
            jj_consume_token(RPAREN);
            break;
          default:
            jj_la1[56] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } finally {
      trace_return("factor");
    }
  }

  final public void arglist(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("arglist");
    try {
RecoverySet f =  new RecoverySet(COMMA).union(g);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case int_constant:
      case string_constant:
      case null_constant:
      case boolean_constant:
      case char_constant:
      case double_constant:
      case byte_constant:
      case short_constant:
      case long_constant:
      case float_constant:
      case IDENT:
      case LPAREN:
      case PLUS:
      case MINUS:
      case NOT:
        logicexpression(f);
        label_19:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[57] = jj_gen;
            break label_19;
          }
          jj_consume_token(COMMA);
          logicexpression(f);
        }
        break;
      default:
        jj_la1[58] = jj_gen;
        ;
      }
    } finally {
      trace_return("arglist");
    }
  }

  final public void primitivetype(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("primitivetype");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        jj_consume_token(INT);
        break;
      case STRING:
        jj_consume_token(STRING);
        break;
      case BOOLEAN:
        jj_consume_token(BOOLEAN);
        break;
      case CHAR:
        jj_consume_token(CHAR);
        break;
      case DOUBLE:
        jj_consume_token(DOUBLE);
        break;
      case BYTE:
        jj_consume_token(BYTE);
        break;
      case SHORT:
        jj_consume_token(SHORT);
        break;
      case LONG:
        jj_consume_token(LONG);
        break;
      case FLOAT:
        jj_consume_token(FLOAT);
        break;
      default:
        jj_la1[59] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("primitivetype");
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_3R_52() {
    if (!jj_rescan) trace_call("factor(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) { if (!jj_rescan) trace_return("factor(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    { if (!jj_rescan) trace_return("factor(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_26() {
    if (!jj_rescan) trace_call("lvalue(LOOKING AHEAD...)");
    if (jj_scan_token(IDENT)) { if (!jj_rescan) trace_return("lvalue(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_38()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("lvalue(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) return true;
    }
    }
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) return true;
    }
    return false;
  }

  private boolean jj_3R_49() {
    if (!jj_rescan) trace_call("unaryexpr(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) jj_scanpos = xsp;
    if (jj_3R_52()) { if (!jj_rescan) trace_return("unaryexpr(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("unaryexpr(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_23() {
    if (!jj_rescan) trace_call("constructdecl(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) jj_scanpos = xsp;
    if (jj_scan_token(CONSTRUCTOR)) { if (!jj_rescan) trace_return("constructdecl(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_33()) { if (!jj_rescan) trace_return("constructdecl(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("constructdecl(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) return true;
    }
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (!jj_rescan) trace_call("term(LOOKING AHEAD...)");
    if (jj_3R_49()) { if (!jj_rescan) trace_return("term(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_50()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("term(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (!jj_rescan) trace_call("numexpr(LOOKING AHEAD...)");
    if (jj_3R_47()) { if (!jj_rescan) trace_return("numexpr(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_48()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("numexpr(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) return true;
    }
    }
    }
    }
    }
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(81)) jj_scanpos = xsp;
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (!jj_rescan) trace_call("vardecl(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(38)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) { if (!jj_rescan) trace_return("vardecl(LOOKAHEAD FAILED)"); return true; }
    }
    if (jj_scan_token(IDENT)) { if (!jj_rescan) trace_return("vardecl(LOOKAHEAD FAILED)"); return true; }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_30()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_31()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("vardecl(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_6() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_21()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (!jj_rescan) trace_call("expression(LOOKING AHEAD...)");
    if (jj_3R_42()) { if (!jj_rescan) trace_return("expression(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) jj_scanpos = xsp;
    { if (!jj_rescan) trace_return("expression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_46() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) return true;
    }
    return false;
  }

  private boolean jj_3R_25() {
    if (!jj_rescan) trace_call("logicexpression(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(81)) jj_scanpos = xsp;
    if (jj_3R_36()) { if (!jj_rescan) trace_return("logicexpression(LOOKAHEAD FAILED)"); return true; }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_37()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("logicexpression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_1() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (!jj_rescan) trace_call("paramlist(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) jj_scanpos = xsp;
    { if (!jj_rescan) trace_return("paramlist(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_10() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_40() {
    if (!jj_rescan) trace_call("primitivetype(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) { if (!jj_rescan) trace_return("primitivetype(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    }
    }
    }
    }
    }
    { if (!jj_rescan) trace_return("primitivetype(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_27() {
    if (!jj_rescan) trace_call("classdecl(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) jj_scanpos = xsp;
    if (jj_scan_token(CLASS)) { if (!jj_rescan) trace_return("classdecl(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(IDENT)) { if (!jj_rescan) trace_return("classdecl(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("classdecl(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (!jj_rescan) trace_call("atribstat(LOOKING AHEAD...)");
    if (jj_3R_26()) { if (!jj_rescan) trace_return("atribstat(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(ASSIGN)) { if (!jj_rescan) trace_return("atribstat(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("atribstat(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_20() {
    if (!jj_rescan) trace_call("classlist(LOOKING AHEAD...)");
    if (jj_3R_27()) { if (!jj_rescan) trace_return("classlist(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("classlist(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_33() {
    if (!jj_rescan) trace_call("methodbody(LOOKING AHEAD...)");
    if (jj_scan_token(LPAREN)) { if (!jj_rescan) trace_return("methodbody(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("methodbody(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_36()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    }
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (!jj_rescan) trace_call("methodcall(LOOKING AHEAD...)");
    if (jj_scan_token(IDENT)) { if (!jj_rescan) trace_return("methodcall(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_34()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LPAREN)) { if (!jj_rescan) trace_return("methodcall(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_35()) { if (!jj_rescan) trace_return("methodcall(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(RPAREN)) { if (!jj_rescan) trace_return("methodcall(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("methodcall(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  /** Generated Token Manager. */
  public langXTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[60];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2001,0x2001,0x0,0x0,0x10000,0x81080000,0x0,0x0,0x0,0x81080000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x81080000,0x0,0x81080000,0x0,0x0,0x81080000,0x0,0x81080000,0x9fee1000,0x0,0x100000,0x0,0x8000,0x0,0x0,0x0,0x60000000,0x60000000,0x9fee1000,0x0,0x0,0x0,0x81080000,0x0,0x81080000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x81080000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x380,0x380,0x380,0x380,0x0,0x1003ff,0x380,0x380,0x40,0x10003f,0x8000000,0x40000000,0x8000000,0x380,0x380,0x380,0x380,0x40,0x10003f,0x8000000,0x10003f,0x8000000,0x40000000,0x10003f,0x8000000,0x10003f,0x221003ff,0x80000000,0x0,0x9ffc00,0x0,0x100000,0x9ffc00,0x100000,0x0,0x0,0x221003ff,0x88000000,0x800000,0x88000000,0x10003f,0x8000000,0x10003f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffc00,0x900000,0x40000000,0x9ffc00,0x3f,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20600,0x0,0x0,0x20600,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x1c000,0x1c000,0x20000,0x1f8,0x1f8,0x600,0x600,0x3800,0x3800,0x600,0x600,0x0,0x0,0x0,0x20600,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[11];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public langX(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public langX(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new langXTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public langX(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new langXTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public langX(langXTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(langXTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    } else {
      trace_scan(jj_scanpos, kind);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[84];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 60; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 84; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 11; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
